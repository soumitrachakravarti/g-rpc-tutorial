// Here we are going to simulate a client

package main

import (
	"context"
	"fmt"
	"log"

	calculatorpb "github.com/soumitrachakravarti/g-rpc-tutorial/calculator/calculator-pb"
	"google.golang.org/grpc"
)

func main() {
	// Loggging Client
	fmt.Printf("Client running...")

	// Establish connection with host
	c, e := grpc.Dial("localhost:50051", grpc.WithInsecure())
	if e != nil {
		fmt.Printf("Couldn't establish connection with the host %v", e)
	}
	// Closing connection
	defer c.Close()

	// Connect with Calculator Client Service generated by the proto file
	// cc := calculatorpb.NewSumServiceClient(c)

	// Invoking the Sum Function
	fmt.Println("Invoking Sum Function")
	doSum(calculatorpb.NewSumServiceClient(c))

	// Invoking the Sub Function
	fmt.Println("Invoking Sub Function")
	doSub(calculatorpb.NewSubServiceClient(c))

	// Invoking the Mul Function
	fmt.Println("Invoking Mul Function")
	doMul(calculatorpb.NewMulServiceClient(c))

	// Invoking the Mul Function
	fmt.Println("Invoking Mul Function")
	doDiv(calculatorpb.NewDivServiceClient(c))
}

// Sum Client Call
func doSum(cc calculatorpb.SumServiceClient) {
	// Creating a request
	request := &calculatorpb.SumRequest{
		A: 10,
		B: 10,
	}
	// Passing request
	response, e := cc.Sum(context.Background(), request)
	if e != nil {
		log.Fatalf("Error while calling Sum RPC: %v", e)
	}
	// Logging output
	log.Printf("Response from Sum RPC :%v", response.Result)

}

// Sub Client Call
func doSub(cc calculatorpb.SubServiceClient) {
	// Creating a request
	request := &calculatorpb.SubRequest{
		A: 10,
		B: 10,
	}
	// Passing request
	response, e := cc.Sub(context.Background(), request)
	if e != nil {
		log.Fatalf("Error while calling Sub RPC: %v", e)
	}
	// Logging output
	log.Printf("Response from Sub RPC :%v", response.Result)

}

// Mul Client Call
func doMul(cc calculatorpb.MulServiceClient) {
	// Creating a request
	request := &calculatorpb.MulRequest{
		A: 10,
		B: 10,
	}
	// Passing request
	response, e := cc.Mul(context.Background(), request)
	if e != nil {
		log.Fatalf("Error while calling Mul RPC: %v", e)
	}
	// Logging output
	log.Printf("Response from Mul RPC :%v", response.Result)

}

// Div Client Call
func doDiv(cc calculatorpb.DivServiceClient) {
	// Creating a request
	request := &calculatorpb.DivRequest{
		A: 10,
		B: 10,
	}
	// Passing request
	response, e := cc.Div(context.Background(), request)
	if e != nil {
		log.Fatalf("Error while calling Div RPC: %v", e)
	}
	// Logging output
	log.Printf("Response from Div RPC :%v", response.Result)

}
