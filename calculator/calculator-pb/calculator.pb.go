// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator/calculator-pb/calculator.proto

package calculatorpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SumRequest struct {
	A                    int32    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumRequest) Reset()         { *m = SumRequest{} }
func (m *SumRequest) String() string { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()    {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa415e23431a498a, []int{0}
}

func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRequest.Unmarshal(m, b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
}
func (m *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(m, src)
}
func (m *SumRequest) XXX_Size() int {
	return xxx_messageInfo_SumRequest.Size(m)
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *SumRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type SumResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResponse) Reset()         { *m = SumResponse{} }
func (m *SumResponse) String() string { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()    {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa415e23431a498a, []int{1}
}

func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResponse.Unmarshal(m, b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
}
func (m *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(m, src)
}
func (m *SumResponse) XXX_Size() int {
	return xxx_messageInfo_SumResponse.Size(m)
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type SubRequest struct {
	A                    int32    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubRequest) Reset()         { *m = SubRequest{} }
func (m *SubRequest) String() string { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()    {}
func (*SubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa415e23431a498a, []int{2}
}

func (m *SubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubRequest.Unmarshal(m, b)
}
func (m *SubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubRequest.Marshal(b, m, deterministic)
}
func (m *SubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubRequest.Merge(m, src)
}
func (m *SubRequest) XXX_Size() int {
	return xxx_messageInfo_SubRequest.Size(m)
}
func (m *SubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubRequest proto.InternalMessageInfo

func (m *SubRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *SubRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type SubResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubResponse) Reset()         { *m = SubResponse{} }
func (m *SubResponse) String() string { return proto.CompactTextString(m) }
func (*SubResponse) ProtoMessage()    {}
func (*SubResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa415e23431a498a, []int{3}
}

func (m *SubResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubResponse.Unmarshal(m, b)
}
func (m *SubResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubResponse.Marshal(b, m, deterministic)
}
func (m *SubResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubResponse.Merge(m, src)
}
func (m *SubResponse) XXX_Size() int {
	return xxx_messageInfo_SubResponse.Size(m)
}
func (m *SubResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubResponse proto.InternalMessageInfo

func (m *SubResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type MulRequest struct {
	A                    int32    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MulRequest) Reset()         { *m = MulRequest{} }
func (m *MulRequest) String() string { return proto.CompactTextString(m) }
func (*MulRequest) ProtoMessage()    {}
func (*MulRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa415e23431a498a, []int{4}
}

func (m *MulRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MulRequest.Unmarshal(m, b)
}
func (m *MulRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MulRequest.Marshal(b, m, deterministic)
}
func (m *MulRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulRequest.Merge(m, src)
}
func (m *MulRequest) XXX_Size() int {
	return xxx_messageInfo_MulRequest.Size(m)
}
func (m *MulRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MulRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MulRequest proto.InternalMessageInfo

func (m *MulRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *MulRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type MulResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MulResponse) Reset()         { *m = MulResponse{} }
func (m *MulResponse) String() string { return proto.CompactTextString(m) }
func (*MulResponse) ProtoMessage()    {}
func (*MulResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa415e23431a498a, []int{5}
}

func (m *MulResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MulResponse.Unmarshal(m, b)
}
func (m *MulResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MulResponse.Marshal(b, m, deterministic)
}
func (m *MulResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulResponse.Merge(m, src)
}
func (m *MulResponse) XXX_Size() int {
	return xxx_messageInfo_MulResponse.Size(m)
}
func (m *MulResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MulResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MulResponse proto.InternalMessageInfo

func (m *MulResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type DivRequest struct {
	A                    int32    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DivRequest) Reset()         { *m = DivRequest{} }
func (m *DivRequest) String() string { return proto.CompactTextString(m) }
func (*DivRequest) ProtoMessage()    {}
func (*DivRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa415e23431a498a, []int{6}
}

func (m *DivRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DivRequest.Unmarshal(m, b)
}
func (m *DivRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DivRequest.Marshal(b, m, deterministic)
}
func (m *DivRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DivRequest.Merge(m, src)
}
func (m *DivRequest) XXX_Size() int {
	return xxx_messageInfo_DivRequest.Size(m)
}
func (m *DivRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DivRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DivRequest proto.InternalMessageInfo

func (m *DivRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *DivRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type DivResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DivResponse) Reset()         { *m = DivResponse{} }
func (m *DivResponse) String() string { return proto.CompactTextString(m) }
func (*DivResponse) ProtoMessage()    {}
func (*DivResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa415e23431a498a, []int{7}
}

func (m *DivResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DivResponse.Unmarshal(m, b)
}
func (m *DivResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DivResponse.Marshal(b, m, deterministic)
}
func (m *DivResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DivResponse.Merge(m, src)
}
func (m *DivResponse) XXX_Size() int {
	return xxx_messageInfo_DivResponse.Size(m)
}
func (m *DivResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DivResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DivResponse proto.InternalMessageInfo

func (m *DivResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*SumRequest)(nil), "calculator.SumRequest")
	proto.RegisterType((*SumResponse)(nil), "calculator.SumResponse")
	proto.RegisterType((*SubRequest)(nil), "calculator.SubRequest")
	proto.RegisterType((*SubResponse)(nil), "calculator.SubResponse")
	proto.RegisterType((*MulRequest)(nil), "calculator.MulRequest")
	proto.RegisterType((*MulResponse)(nil), "calculator.MulResponse")
	proto.RegisterType((*DivRequest)(nil), "calculator.DivRequest")
	proto.RegisterType((*DivResponse)(nil), "calculator.DivResponse")
}

func init() {
	proto.RegisterFile("calculator/calculator-pb/calculator.proto", fileDescriptor_aa415e23431a498a)
}

var fileDescriptor_aa415e23431a498a = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd2, 0xb1, 0x4b, 0x03, 0x31,
	0x14, 0x06, 0xf0, 0x9e, 0x62, 0x87, 0x67, 0x71, 0xc8, 0x50, 0x8b, 0x93, 0x1c, 0x08, 0x75, 0xb0,
	0x82, 0x2e, 0xce, 0x72, 0xb8, 0xdd, 0xd2, 0xdb, 0xdc, 0xf2, 0x8e, 0x0c, 0x81, 0xd4, 0xc4, 0x24,
	0x2f, 0x7f, 0xbf, 0x98, 0x14, 0x92, 0x28, 0xda, 0x6c, 0xf7, 0xbd, 0xfb, 0xf8, 0x0d, 0x1f, 0x81,
	0xfb, 0x99, 0xab, 0x99, 0x14, 0xf7, 0xda, 0x3e, 0xe6, 0xcf, 0x07, 0x83, 0x45, 0xda, 0x19, 0xab,
	0xbd, 0x66, 0x90, 0x2f, 0xfd, 0x16, 0x60, 0xa2, 0xc3, 0x5e, 0x7c, 0x92, 0x70, 0x9e, 0xad, 0xa0,
	0xe3, 0x9b, 0xee, 0xb6, 0xdb, 0x5e, 0xec, 0x3b, 0xfe, 0x9d, 0x70, 0x73, 0x96, 0x12, 0xf6, 0x77,
	0x70, 0x19, 0x9b, 0xce, 0xe8, 0x0f, 0x27, 0xd8, 0x1a, 0x96, 0x56, 0x38, 0x52, 0xfe, 0xd8, 0x3f,
	0xa6, 0x04, 0x62, 0x33, 0x88, 0x2d, 0xe0, 0x48, 0xaa, 0x11, 0x8c, 0xcd, 0xd3, 0xe0, 0x20, 0x43,
	0x23, 0x18, 0x9b, 0xff, 0x83, 0x4f, 0x6f, 0x71, 0xc3, 0x49, 0xd8, 0x20, 0x67, 0xc1, 0x5e, 0xe0,
	0x7c, 0xa2, 0x03, 0x5b, 0xef, 0x8a, 0xdd, 0xf3, 0xc4, 0x37, 0xd7, 0xbf, 0xee, 0x49, 0xef, 0x17,
	0xc9, 0xc1, 0xca, 0xc1, 0x9f, 0x0e, 0xfe, 0xe1, 0x60, 0xed, 0x8c, 0xa4, 0x0a, 0x67, 0x24, 0x55,
	0x3b, 0x79, 0xd0, 0xda, 0x29, 0xe6, 0x4b, 0xce, 0x20, 0x43, 0xe1, 0x0c, 0x32, 0xd4, 0x4e, 0xde,
	0xb1, 0x76, 0x8a, 0xd5, 0xfa, 0xc5, 0xeb, 0xd5, 0xfb, 0x2a, 0xff, 0x33, 0x88, 0xcb, 0xf8, 0x0c,
	0x9f, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x16, 0x6f, 0x1d, 0xb3, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SumServiceClient is the client API for SumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SumServiceClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
}

type sumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSumServiceClient(cc grpc.ClientConnInterface) SumServiceClient {
	return &sumServiceClient{cc}
}

func (c *sumServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calculator.SumService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SumServiceServer is the server API for SumService service.
type SumServiceServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
}

// UnimplementedSumServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSumServiceServer struct {
}

func (*UnimplementedSumServiceServer) Sum(ctx context.Context, req *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}

func RegisterSumServiceServer(s *grpc.Server, srv SumServiceServer) {
	s.RegisterService(&_SumService_serviceDesc, srv)
}

func _SumService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.SumService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SumService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.SumService",
	HandlerType: (*SumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _SumService_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator/calculator-pb/calculator.proto",
}

// SubServiceClient is the client API for SubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubServiceClient interface {
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubResponse, error)
}

type subServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubServiceClient(cc grpc.ClientConnInterface) SubServiceClient {
	return &subServiceClient{cc}
}

func (c *subServiceClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubResponse, error) {
	out := new(SubResponse)
	err := c.cc.Invoke(ctx, "/calculator.SubService/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubServiceServer is the server API for SubService service.
type SubServiceServer interface {
	Sub(context.Context, *SubRequest) (*SubResponse, error)
}

// UnimplementedSubServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSubServiceServer struct {
}

func (*UnimplementedSubServiceServer) Sub(ctx context.Context, req *SubRequest) (*SubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}

func RegisterSubServiceServer(s *grpc.Server, srv SubServiceServer) {
	s.RegisterService(&_SubService_serviceDesc, srv)
}

func _SubService_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServiceServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.SubService/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServiceServer).Sub(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.SubService",
	HandlerType: (*SubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sub",
			Handler:    _SubService_Sub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator/calculator-pb/calculator.proto",
}

// MulServiceClient is the client API for MulService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MulServiceClient interface {
	Mul(ctx context.Context, in *MulRequest, opts ...grpc.CallOption) (*MulResponse, error)
}

type mulServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMulServiceClient(cc grpc.ClientConnInterface) MulServiceClient {
	return &mulServiceClient{cc}
}

func (c *mulServiceClient) Mul(ctx context.Context, in *MulRequest, opts ...grpc.CallOption) (*MulResponse, error) {
	out := new(MulResponse)
	err := c.cc.Invoke(ctx, "/calculator.MulService/Mul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MulServiceServer is the server API for MulService service.
type MulServiceServer interface {
	Mul(context.Context, *MulRequest) (*MulResponse, error)
}

// UnimplementedMulServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMulServiceServer struct {
}

func (*UnimplementedMulServiceServer) Mul(ctx context.Context, req *MulRequest) (*MulResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mul not implemented")
}

func RegisterMulServiceServer(s *grpc.Server, srv MulServiceServer) {
	s.RegisterService(&_MulService_serviceDesc, srv)
}

func _MulService_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulServiceServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.MulService/Mul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulServiceServer).Mul(ctx, req.(*MulRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MulService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.MulService",
	HandlerType: (*MulServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mul",
			Handler:    _MulService_Mul_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator/calculator-pb/calculator.proto",
}

// DivServiceClient is the client API for DivService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DivServiceClient interface {
	Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error)
}

type divServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDivServiceClient(cc grpc.ClientConnInterface) DivServiceClient {
	return &divServiceClient{cc}
}

func (c *divServiceClient) Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error) {
	out := new(DivResponse)
	err := c.cc.Invoke(ctx, "/calculator.DivService/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DivServiceServer is the server API for DivService service.
type DivServiceServer interface {
	Div(context.Context, *DivRequest) (*DivResponse, error)
}

// UnimplementedDivServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDivServiceServer struct {
}

func (*UnimplementedDivServiceServer) Div(ctx context.Context, req *DivRequest) (*DivResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}

func RegisterDivServiceServer(s *grpc.Server, srv DivServiceServer) {
	s.RegisterService(&_DivService_serviceDesc, srv)
}

func _DivService_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivServiceServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.DivService/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivServiceServer).Div(ctx, req.(*DivRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DivService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.DivService",
	HandlerType: (*DivServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Div",
			Handler:    _DivService_Div_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator/calculator-pb/calculator.proto",
}
